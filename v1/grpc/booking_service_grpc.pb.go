// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: v1/grpc/booking_service.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MovieBookingServiceClient is the client API for MovieBookingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MovieBookingServiceClient interface {
	MakeBooking(ctx context.Context, in *BookingQuery, opts ...grpc.CallOption) (*BookingDetails, error)
	GetBookingDetails(ctx context.Context, in *BookingQuery, opts ...grpc.CallOption) (*BookingDetails, error)
	GetAllBookingsByLocation(ctx context.Context, in *BookingQuery, opts ...grpc.CallOption) (MovieBookingService_GetAllBookingsByLocationClient, error)
	GetAllBookingsByName(ctx context.Context, in *BookingQuery, opts ...grpc.CallOption) (MovieBookingService_GetAllBookingsByNameClient, error)
	GetAllBookingsByMovie(ctx context.Context, in *BookingQuery, opts ...grpc.CallOption) (MovieBookingService_GetAllBookingsByMovieClient, error)
}

type movieBookingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMovieBookingServiceClient(cc grpc.ClientConnInterface) MovieBookingServiceClient {
	return &movieBookingServiceClient{cc}
}

func (c *movieBookingServiceClient) MakeBooking(ctx context.Context, in *BookingQuery, opts ...grpc.CallOption) (*BookingDetails, error) {
	out := new(BookingDetails)
	err := c.cc.Invoke(ctx, "/booking.MovieBookingService/makeBooking", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieBookingServiceClient) GetBookingDetails(ctx context.Context, in *BookingQuery, opts ...grpc.CallOption) (*BookingDetails, error) {
	out := new(BookingDetails)
	err := c.cc.Invoke(ctx, "/booking.MovieBookingService/getBookingDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieBookingServiceClient) GetAllBookingsByLocation(ctx context.Context, in *BookingQuery, opts ...grpc.CallOption) (MovieBookingService_GetAllBookingsByLocationClient, error) {
	stream, err := c.cc.NewStream(ctx, &MovieBookingService_ServiceDesc.Streams[0], "/booking.MovieBookingService/getAllBookingsByLocation", opts...)
	if err != nil {
		return nil, err
	}
	x := &movieBookingServiceGetAllBookingsByLocationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MovieBookingService_GetAllBookingsByLocationClient interface {
	Recv() (*BookingDetails, error)
	grpc.ClientStream
}

type movieBookingServiceGetAllBookingsByLocationClient struct {
	grpc.ClientStream
}

func (x *movieBookingServiceGetAllBookingsByLocationClient) Recv() (*BookingDetails, error) {
	m := new(BookingDetails)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *movieBookingServiceClient) GetAllBookingsByName(ctx context.Context, in *BookingQuery, opts ...grpc.CallOption) (MovieBookingService_GetAllBookingsByNameClient, error) {
	stream, err := c.cc.NewStream(ctx, &MovieBookingService_ServiceDesc.Streams[1], "/booking.MovieBookingService/getAllBookingsByName", opts...)
	if err != nil {
		return nil, err
	}
	x := &movieBookingServiceGetAllBookingsByNameClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MovieBookingService_GetAllBookingsByNameClient interface {
	Recv() (*BookingDetails, error)
	grpc.ClientStream
}

type movieBookingServiceGetAllBookingsByNameClient struct {
	grpc.ClientStream
}

func (x *movieBookingServiceGetAllBookingsByNameClient) Recv() (*BookingDetails, error) {
	m := new(BookingDetails)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *movieBookingServiceClient) GetAllBookingsByMovie(ctx context.Context, in *BookingQuery, opts ...grpc.CallOption) (MovieBookingService_GetAllBookingsByMovieClient, error) {
	stream, err := c.cc.NewStream(ctx, &MovieBookingService_ServiceDesc.Streams[2], "/booking.MovieBookingService/getAllBookingsByMovie", opts...)
	if err != nil {
		return nil, err
	}
	x := &movieBookingServiceGetAllBookingsByMovieClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MovieBookingService_GetAllBookingsByMovieClient interface {
	Recv() (*BookingDetails, error)
	grpc.ClientStream
}

type movieBookingServiceGetAllBookingsByMovieClient struct {
	grpc.ClientStream
}

func (x *movieBookingServiceGetAllBookingsByMovieClient) Recv() (*BookingDetails, error) {
	m := new(BookingDetails)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MovieBookingServiceServer is the server API for MovieBookingService service.
// All implementations must embed UnimplementedMovieBookingServiceServer
// for forward compatibility
type MovieBookingServiceServer interface {
	MakeBooking(context.Context, *BookingQuery) (*BookingDetails, error)
	GetBookingDetails(context.Context, *BookingQuery) (*BookingDetails, error)
	GetAllBookingsByLocation(*BookingQuery, MovieBookingService_GetAllBookingsByLocationServer) error
	GetAllBookingsByName(*BookingQuery, MovieBookingService_GetAllBookingsByNameServer) error
	GetAllBookingsByMovie(*BookingQuery, MovieBookingService_GetAllBookingsByMovieServer) error
	mustEmbedUnimplementedMovieBookingServiceServer()
}

// UnimplementedMovieBookingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMovieBookingServiceServer struct {
}

func (UnimplementedMovieBookingServiceServer) MakeBooking(context.Context, *BookingQuery) (*BookingDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeBooking not implemented")
}
func (UnimplementedMovieBookingServiceServer) GetBookingDetails(context.Context, *BookingQuery) (*BookingDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBookingDetails not implemented")
}
func (UnimplementedMovieBookingServiceServer) GetAllBookingsByLocation(*BookingQuery, MovieBookingService_GetAllBookingsByLocationServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllBookingsByLocation not implemented")
}
func (UnimplementedMovieBookingServiceServer) GetAllBookingsByName(*BookingQuery, MovieBookingService_GetAllBookingsByNameServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllBookingsByName not implemented")
}
func (UnimplementedMovieBookingServiceServer) GetAllBookingsByMovie(*BookingQuery, MovieBookingService_GetAllBookingsByMovieServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllBookingsByMovie not implemented")
}
func (UnimplementedMovieBookingServiceServer) mustEmbedUnimplementedMovieBookingServiceServer() {}

// UnsafeMovieBookingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MovieBookingServiceServer will
// result in compilation errors.
type UnsafeMovieBookingServiceServer interface {
	mustEmbedUnimplementedMovieBookingServiceServer()
}

func RegisterMovieBookingServiceServer(s grpc.ServiceRegistrar, srv MovieBookingServiceServer) {
	s.RegisterService(&MovieBookingService_ServiceDesc, srv)
}

func _MovieBookingService_MakeBooking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookingQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieBookingServiceServer).MakeBooking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.MovieBookingService/makeBooking",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieBookingServiceServer).MakeBooking(ctx, req.(*BookingQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieBookingService_GetBookingDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookingQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieBookingServiceServer).GetBookingDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking.MovieBookingService/getBookingDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieBookingServiceServer).GetBookingDetails(ctx, req.(*BookingQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieBookingService_GetAllBookingsByLocation_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BookingQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MovieBookingServiceServer).GetAllBookingsByLocation(m, &movieBookingServiceGetAllBookingsByLocationServer{stream})
}

type MovieBookingService_GetAllBookingsByLocationServer interface {
	Send(*BookingDetails) error
	grpc.ServerStream
}

type movieBookingServiceGetAllBookingsByLocationServer struct {
	grpc.ServerStream
}

func (x *movieBookingServiceGetAllBookingsByLocationServer) Send(m *BookingDetails) error {
	return x.ServerStream.SendMsg(m)
}

func _MovieBookingService_GetAllBookingsByName_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BookingQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MovieBookingServiceServer).GetAllBookingsByName(m, &movieBookingServiceGetAllBookingsByNameServer{stream})
}

type MovieBookingService_GetAllBookingsByNameServer interface {
	Send(*BookingDetails) error
	grpc.ServerStream
}

type movieBookingServiceGetAllBookingsByNameServer struct {
	grpc.ServerStream
}

func (x *movieBookingServiceGetAllBookingsByNameServer) Send(m *BookingDetails) error {
	return x.ServerStream.SendMsg(m)
}

func _MovieBookingService_GetAllBookingsByMovie_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BookingQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MovieBookingServiceServer).GetAllBookingsByMovie(m, &movieBookingServiceGetAllBookingsByMovieServer{stream})
}

type MovieBookingService_GetAllBookingsByMovieServer interface {
	Send(*BookingDetails) error
	grpc.ServerStream
}

type movieBookingServiceGetAllBookingsByMovieServer struct {
	grpc.ServerStream
}

func (x *movieBookingServiceGetAllBookingsByMovieServer) Send(m *BookingDetails) error {
	return x.ServerStream.SendMsg(m)
}

// MovieBookingService_ServiceDesc is the grpc.ServiceDesc for MovieBookingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MovieBookingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "booking.MovieBookingService",
	HandlerType: (*MovieBookingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "makeBooking",
			Handler:    _MovieBookingService_MakeBooking_Handler,
		},
		{
			MethodName: "getBookingDetails",
			Handler:    _MovieBookingService_GetBookingDetails_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "getAllBookingsByLocation",
			Handler:       _MovieBookingService_GetAllBookingsByLocation_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "getAllBookingsByName",
			Handler:       _MovieBookingService_GetAllBookingsByName_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "getAllBookingsByMovie",
			Handler:       _MovieBookingService_GetAllBookingsByMovie_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "v1/grpc/booking_service.proto",
}
